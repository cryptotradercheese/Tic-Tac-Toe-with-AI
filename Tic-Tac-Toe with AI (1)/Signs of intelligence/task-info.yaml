type: edu
custom_name: stage4
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |+
    package tictactoe;
    import java.util.Scanner;
    import java.util.Random;
    import java.util.Arrays.*;

    class Main {
        private static boolean isXWinner = false;
        private static boolean isOWinner = false;

        public static void main(String[] args) {
            final Scanner scanner = new Scanner(System.in);
            String input = "";

            while (!"exit".equals(input)) {
                char[][] grid = setGrid();
                System.out.print("Input command: ");
                input = scanner.nextLine();

                if ("start easy user".equals(input)) {
                    while (!isGameFinished(grid)) {
                        showResult(grid);
                        makeMoveAI(grid);

                        if (!isGameFinished(grid)) {
                            showResult(grid);
                            makeMovePlayer(grid);
                        }
                    }
                    showResult(grid);

    //                while (true) {
    //                    if (!isGameFinished(grid)) {
    //                        showResult(grid);
    //                        makeMoveAI(grid);
    //                    } else {
    //                        break;
    //                    }
    //
    //                    if (!isGameFinished(grid)) {
    //                        showResult(grid);
    //                        makeMovePlayer(grid);
    //                    } else {
    //                        break;
    //                    }
    //                }
                } else if ("start user easy".equals(input)) {
                    while (!isGameFinished(grid)) {
                        showResult(grid);
                        makeMovePlayer(grid);

                        if (!isGameFinished(grid)) {
                            showResult(grid);
                            makeMoveAI(grid);
                        }
                    }
                    showResult(grid);
                } else if ("start easy easy".equals(input)) {
                    while (!isGameFinished(grid)) {
                        showResult(grid);
                        makeMoveAI(grid);
                    }
                    showResult(grid);
                } else if ("start user user".equals(input)) {
                    while (!isGameFinished(grid)) {
                        showResult(grid);
                        makeMovePlayer(grid);
                    }
                    showResult(grid);
                } else if (!"exit".equals(input)) {
                    System.out.println("Bad parameters!");
                }
            }
        }

        public static char[][] setGrid() {
            char[][] grid = new char[3][3];
            for (int i = 0, totalIteration = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++, totalIteration++) {
                    grid[i][j] = ' ';
                }
            }
            return grid;
        }

        public static void makeMovePlayer(char[][] grid) {
            final Scanner scanner = new Scanner(System.in);
            boolean isLegalMove = false;

            while (!isLegalMove) {
                System.out.print("Enter the coordinates: ");
                final String rowsAndColumns = scanner.nextLine();

                if (rowsAndColumns.matches("\\d \\d")) {
                    final int row = Integer.parseInt(rowsAndColumns.split(" ")[0]) - 1;
                    final int column = Integer.parseInt(rowsAndColumns.split(" ")[1]) - 1;
                    final int xs = countXsAndOs(grid)[0];
                    final int os = countXsAndOs(grid)[1];
                    if (row < 0 || row > 2 || column < 0 || column > 2) {
                        System.out.println("Coordinates should be from 1 to 3!");
                    } else if (grid[row][column] == 'X' || grid[row][column] == 'O') {
                        System.out.println("This cell is occupied! Choose another one!");
                    } else {
                        if (xs <= os) {
                            grid[row][column] = 'X';
                        } else if (xs > os) {
                            grid[row][column] = 'O';
                        }
                        isLegalMove = true;
                    }
                } else {
                    System.out.println("You should enter numbers!");
                }
            }
        }

        public static void makeMoveAI(char[][] grid) {
            final Random random = new Random();
            final int xs = countXsAndOs(grid)[0];
            final int os = countXsAndOs(grid)[1];
            System.out.println("Making move level \"easy\"");

            int rand, row, column;
            do {
                rand = random.nextInt(9);
                row = rand / 3;
                column = rand % 3;
            } while (grid[row][column] != ' ');
            if (xs <= os) {
                grid[row][column] = 'X';
            } else if (xs > os) {
                grid[row][column] = 'O';
            }
        }

        public static void showResult(char[][] grid) {
            System.out.println("---------");
            for (int i = 0; i < 3; i++) {
                String line = "| ";
                for (int j = 0; j < 3; j++) {
                    line += grid[i][j] + " ";
                }
                line += "|";
                System.out.println(line);
            }
            System.out.println("---------");

            int XsAndOs = countXsAndOs(grid)[0] + countXsAndOs(grid)[1];
            if (isXWinner) {
                isXWinner = false;
                isOWinner = false;
                System.out.println("X wins");
            } else if (isOWinner) {
                isXWinner = false;
                isOWinner = false;
                System.out.println("O wins");
            } else if (XsAndOs == 9) {
                isXWinner = false;
                isOWinner = false;
                System.out.println("Draw");
            }
        }

        public static boolean isGameFinished(char[][] grid) {
            boolean isGameFinished = false;
            int XsAndOs = countXsAndOs(grid)[0] + countXsAndOs(grid)[1];

            // win either in row or in column
            for (int i = 0; i < 3; i++) {
                for (int m = 0; m < 2 && grid[i][m] == grid[i][m + 1]; m++) {
                    if (m == 1) {
                        if (grid[i][m] == 'X') {
                            isXWinner = true;
                        } else if (grid[i][m] == 'O') {
                            isOWinner = true;
                        }
                    }
                }

                for (int k = 0; k < 2 && grid[k][i] == grid[k + 1][i]; k++) {
                    if (k == 1) {
                        if (grid[k][i] == 'X') {
                            isXWinner = true;
                        } else if (grid[k][i] == 'O') {
                            isOWinner = true;
                        }
                    }
                }
            }
            // win in diagonal
            if (
                    grid[0][0] == 'O' && grid[1][1] == 'O' && grid[2][2] == 'O' ||
                            grid[0][2] == 'O' && grid[1][1] == 'O' && grid[2][0] == 'O'
            ) {
                isOWinner = true;
            } else if (
                    grid[0][0] == 'X' && grid[1][1] == 'X' && grid[2][2] == 'X' ||
                            grid[0][2] == 'X' && grid[1][1] == 'X' && grid[2][0] == 'X'
            ) {
                isXWinner = true;
            }

            if (isXWinner || isOWinner || XsAndOs == 9) {
                isGameFinished = true;
            }
            return isGameFinished;
        }

        public static void inputCommand() {
            final Scanner scanner = new Scanner(System.in);
            String input = "";

            while (!"exit".equals(input)) {
                System.out.println("Input command: ");
                input = scanner.nextLine();

                if ("start easy user".equals(input)) {
                    char[][] grid = setGrid();

                    while (!isGameFinished(grid)) {
                        showResult(grid);
                        makeMoveAI(grid);

                        if (!isGameFinished(grid)) {
                            makeMovePlayer(grid);
                        } else {
                            showResult(grid);
                        }
                    }
                } else if ("start easy easy".equals(input)) {
                    System.out.println("");
                } else if ("start user user".equals(input)) {
                    System.out.println("");
                } else if (!"exit".equals(input)) {
                    System.out.println("Bad parameters!");
                }
            }
        }

        //auxiliary method
        public static int[] countXsAndOs(char[][] grid) {
            int xs = 0;
            int os = 0;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid[i][j] == 'X') {
                        xs++;
                    } else if (grid[i][j] == 'O') {
                        os++;
                    }
                }
            }
            return new int[] {xs, os};
        }
    }

  learner_created: false
- name: test/Grid.java
  visible: false
  text: |-
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.stream.Collectors;
    import java.util.stream.Stream;

    public class Grid {

        private final CellState[][] grid;

        private Grid() {
            grid = new CellState[3][3];
        }

        public static Grid fromLine(String line) {
            Grid grid = new Grid();

            if (line.length() != 9) {
                throw new WrongAnswer("Wrong input length. Expected 9.\nFound " + line.length());
            }

            for (int i = 0; i < line.length(); i++) {
                grid.grid[i / 3][i % 3] = CellState.get(line.charAt(i));
            }

            return grid;
        }

        public static Grid fromOutput(String stringField) {
            return fromOutput(stringField, 1);
        }

        public static Grid fromOutput(String stringField, int fieldNumber) {

            Grid grid = new Grid();

            List<String> fieldLines = Arrays.stream(stringField.split("\n"))
                .map(String::strip)
                .filter(line -> line.startsWith("|") && line.endsWith("|"))
                .collect(Collectors.toList());

            if (fieldLines.size() < 3 * fieldNumber) {
                throw new WrongAnswer("Expected not less than " + fieldNumber + " grids in the output!\n" +
                    "Make sure you print the game grids in the correct format!");
            }

            fieldLines = fieldLines.subList(fieldNumber * 3 - 3, fieldNumber * 3);

            for (int i = 0; i < fieldLines.size(); i++) {
                String line = fieldLines.get(i);
                if (line.length() != 9) {
                    throw new WrongAnswer("Can't parse the game field. The following line has wrong length:\n" + line);
                }
                for (int j = 0; j < 3; j++) {
                    grid.grid[i][j] = CellState.get(line.charAt(j * 2 + 2));
                }
            }

            return grid;
        }

        public static List<Grid> allGridsFromOutput(String stringField) {

            List<Grid> gridList = new ArrayList<>();

            List<String> fieldLines = Arrays.stream(stringField.split("\n"))
                .map(String::strip)
                .filter(line -> line.startsWith("|") && line.endsWith("|"))
                .collect(Collectors.toList());

            if (fieldLines.size() % 3 != 0) {
                throw new WrongAnswer("Wrong grid output format! Each grid should contain 3 lines that starts and ends with '|' symbol!");
            }

            for (int i = 0; i < fieldLines.size() / 3; i++) {
                List<String> gridLines = fieldLines.subList(i * 3, i * 3 + 3);

                Grid grid = new Grid();

                for (int j = 0; j < gridLines.size(); j++) {
                    String line = gridLines.get(j);
                    if (line.length() != 9) {
                        throw new WrongAnswer("Can't parse the game field. The following line has wrong length:\n" + line);
                    }
                    for (int k = 0; k < 3; k++) {
                        grid.grid[j][k] = CellState.get(line.charAt(k * 2 + 2));
                    }
                }

                gridList.add(grid);
            }

            return gridList;
        }

        public static Position getMove(Grid from, Grid to) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (from.grid[i][j] != to.grid[i][j]) {
                        return new Position(i, j);
                    }
                }
            }
            throw new WrongAnswer("After making a move the grid was the same!");
        }

        public boolean isWin(CellState player) {
            for (int i = 0; i < 3; i++) {
                if (grid[i][0] == grid[i][1] && grid[i][1] == grid[i][2] && grid[i][2] == player) {
                    return true;
                }
            }

            for (int i = 0; i < 3; i++) {
                if (grid[0][i] == grid[1][i] && grid[1][i] == grid[2][i] && grid[2][i] == player) {
                    return true;
                }
            }

            return grid[0][0] == grid[1][1] && grid[1][1] == grid[2][2] && grid[2][2] == player
                || grid[2][0] == grid[1][1] && grid[1][1] == grid[0][2] && grid[0][2] == player;
        }

        public boolean hasEmptyCells() {
            return Arrays.stream(grid)
                .flatMap(Stream::of)
                .anyMatch(cell -> cell == CellState.EMPTY);
        }

        public int getNumOfEmptyCells() {
            return (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.EMPTY).count();
        }

        public GameState getGameState() {
            if (isWin(CellState.X)) return GameState.X_WIN;
            if (isWin(CellState.O)) return GameState.O_WIN;
            if (hasEmptyCells()) return GameState.NOT_FINISHED;
            else return GameState.DRAW;
        }

        public CellState[][] getGrid() {
            return grid;
        }

        public void setCell(int x, int y, CellState cellState) {
            grid[x][y] = cellState;
        }

        public boolean isCorrectNextGrid(Grid grid) {
            return getNumOfEmptyCells() - grid.getNumOfEmptyCells() == 1;
        }

        public boolean isValidGrid() {

            int numOfX = (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.X).count();
            int numOfO = (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.O).count();

            return Math.abs(numOfO - numOfX) <= 1;
        }

        public static void checkGridSequence(List<Grid> grids) {
            if (grids.size() <= 1) {
                return;
            }

            for (int i = 1; i < grids.size(); i++) {
                Grid prevGrid = grids.get(i - 1);
                Grid grid = grids.get(i);
                if (!grid.isValidGrid()) {
                    throw new WrongAnswer("Impossible grid was printed! The difference between Os and Xs in the grid is greater than 1:\n" + grid);
                }
                if (!prevGrid.isCorrectNextGrid(grid)) {
                    throw new WrongAnswer("After making a move on grid\n" + prevGrid + "\n it can't become\n" + grid);
                }
            }

            Grid lastGrid = grids.get(grids.size() - 1);

            if (lastGrid.getGameState() == GameState.NOT_FINISHED) {
                throw new WrongAnswer("Last grid is not terminal!\n" + lastGrid);
            }
        }

        @Override
        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("---------").append("\n");
            for (int i = 0; i < 3; i++) {
                stringBuilder.append("| ").append(grid[i][0]).append(" ").append(grid[i][1]).append(" ").append(grid[i][2]).append(" |\n");
            }
            stringBuilder.append("---------");
            return stringBuilder.toString();
        }

        private String toLine() {
            StringBuilder result = new StringBuilder();
            for (int i = 0; i < 9; i++) {
                result.append(grid[i / 3][i % 3]);
            }
            return result.toString();
        }

        @Override
        public boolean equals(Object o) {
            if (!(o instanceof Grid)) {
                return false;
            }

            Grid grid = (Grid) o;

            for (int i = 0; i < 9; i++) {
                if (grid.grid[i / 3][i % 3] != this.grid[i / 3][i % 3]) {
                    return false;
                }
            }
            return true;
        }

        public Grid copy() {
            return Grid.fromLine(toLine());
        }
    }

    enum GameState {

        X_WIN, O_WIN, DRAW, NOT_FINISHED

    }

    enum CellState {

        X("X"), O("O"), EMPTY(" ");

        String value;

        CellState(String value) {
            this.value = value;
        }

        static CellState get(char symbol) {
            switch (symbol) {
                case 'X':
                    return X;
                case 'O':
                    return O;
                case ' ':
                case '_':
                    return EMPTY;
                default:
                    throw new WrongAnswer("Bad symbol '" + symbol + "' in the game grid");
            }
        }

        static CellState getOpponent(CellState player) {
            if (player == X) {
                return O;
            } else {
                return X;
            }
        }

        @Override
        public String toString() {
            return value;
        }
    }
  learner_created: false
- name: test/Minimax.java
  visible: false
  text: |+
    import java.util.ArrayList;
    import java.util.List;

    public class Minimax {

        private static Position bestPosition;

        public static Position getMove(Grid grid, CellState player) {

            int bestScore = Integer.MIN_VALUE;

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), false, player, 1);
                        grid.setCell(i, j, CellState.EMPTY);
                        if (score > bestScore) {
                            bestScore = score;
                            bestPosition = new Position(i, j);
                        }
                    }
                }
            }

            return bestPosition;
        }

        private static int minimax(Grid grid, CellState player, boolean isMaximize, CellState startPlayer, int depth) {

            switch (grid.getGameState()) {
                case X_WIN:
                    return startPlayer == CellState.X ? 10 - depth : depth - 10;
                case O_WIN:
                    return startPlayer == CellState.O ? 10 - depth : depth - 10;
                case DRAW:
                    return 0;
            }

            int bestScore = isMaximize ? Integer.MIN_VALUE : Integer.MAX_VALUE;

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), !isMaximize, startPlayer, depth + 1);
                        grid.setCell(i, j, CellState.EMPTY);
                        bestScore = isMaximize ? Math.max(bestScore, score) : Math.min(bestScore, score);
                    }
                }
            }

            return bestScore;
        }

        public static List<Position> getAvailablePositions(Grid grid, CellState player) {

            List<Position> positions = new ArrayList<>();

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), false, player, 1);
                        if (score >= 0) {
                            positions.add(new Position(i, j));
                        }
                        grid.setCell(i, j, CellState.EMPTY);
                    }
                }
            }

            return positions;
        }
    }

    class Position {

        int x;
        int y;

        public Position(int x, int y) {
            this.x = x;
            this.y = y;
        }

        @Override
        public String toString() {
            return x + " " + y;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Position position = (Position) o;
            return x == position.x &&
                y == position.y;
        }
    }



  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }


        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 10, order = 7)
        CheckResult checkMediumAi() {
            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            }
            program.stop();

            return CheckResult.correct();
        }

        @DynamicTest(order = 8, repeat = 5)
        CheckResult checkMediumVsMedium() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start medium medium");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        boolean isMediumNotMovingLikeHard = false;

        @DynamicTest(repeat = 30, order = 9)
        CheckResult checkMediumNotMovingLikeHard() {

            if (isMediumNotMovingLikeHard) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid userMoveGrid = Grid.fromOutput(output, 1);
            Grid mediumMoveGrid = Grid.fromOutput(output, 2);

            Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);

            List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);

            if (!minimaxCorrectPositions.contains(mediumMove)) {
                isMediumNotMovingLikeHard = true;
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 10)
        CheckResult checkMediumNotMovingLikeHardAfter() {
            if (!isMediumNotMovingLikeHard) {
                return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Grid.java
  visible: true
  learner_created: true
- name: src/tictactoe/CellContent.java
  visible: true
  learner_created: true
- name: src/tictactoe/GameState.java
  visible: true
  learner_created: true
- name: src/tictactoe/OldBadAttemptToSolveTask.java
  visible: true
  learner_created: true
- name: src/tictactoe/Game.java
  visible: true
  learner_created: true
- name: src/tictactoe/ConsoleGame.java
  visible: true
  learner_created: true
- name: src/tictactoe/PlayerStrategy/EasyDifficulty.java
  visible: true
  learner_created: true
- name: src/tictactoe/PlayerStrategy/HardDifficulty.java
  visible: true
  learner_created: true
- name: src/tictactoe/PlayerStrategy/PlayerArguments.java
  visible: true
  learner_created: true
- name: src/tictactoe/PlayerStrategy/RealPlayer.java
  visible: true
  learner_created: true
- name: src/tictactoe/PlayerStrategy/Player.java
  visible: true
  learner_created: true
- name: src/tictactoe/PlayerStrategy/Difficulty.java
  visible: true
  learner_created: true
- name: src/tictactoe/PlayerStrategy/MediumDifficulty.java
  visible: true
  learner_created: true
- name: src/tictactoe/PlayerStrategy/PlayerContext.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/450/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 30 Jun 2021 16:30:55 UTC
record: 3
